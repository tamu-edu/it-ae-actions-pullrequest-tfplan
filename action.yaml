name: 'Terraform Plan to Pull Request'
description: 'This workflow will generate and post a terraform plan to a pull request.'
inputs:
  debug:
    description: Debug workflow with tmate if an error occurs
    required: false
    default: "false"
  GITHUB_TOKEN:
    description: GitHub token for access to the pull request
    required: true
  working-directory:
    description: Working directory for the `run` actions
    required: false
    default: ''
  terraform-version:
    description: Version of terraform to install
    required: false
    default: latest
  terraform-workspace:
    description: Terraform workspace to select. Must already exist 
    required: false
    default: default
  terraform-init-flags:
    description: CLI flags to use with terraform init
    required: false
    default: ""
  terraform-plan-flags:
    description: CLI flags to use with terraform plan
    required: false
    default: ""
  workflow-artifact-name:
    description: Provides a unique name to append to the plan artifact attached to this workflow run. Default tfplan
    required: false
    default: "tfplan"
  header:
    description: Start all PR comments with this header to unique identify this thread
    required: false
    default: "Terraform Plan Output"


outputs:
  plan:
    description: 'The plan output'
    value: ${{ format('{0}{1}', steps.init.outputs.stdout, steps.init.outputs.stderr) }}
  artifact:
    description: 'The file name of the terraform plan artifact'
    value: "pr-${{ github.event.pull_request.number }}-tfplan"
runs:
  using: "composite"
  steps:
    - name: setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ inputs.terraform-version }}

    # - name: install terraform-plan-summary
    #   shell: bash
    #   run: |
    #     REPO="dineshba/terraform-plan-summary"
    #     curl -LO https://github.com/$REPO/releases/latest/download/tf-summarize_linux_amd64.tar.gz
    #     tmpDir=$(mktemp -d -t tmp.XXXXXXXXXX)
    #     mv tf-summarize_linux_amd64.tar.gz $tmpDir
    #     cd $tmpDir
    #     tar -xzf tf-summarize_linux_amd64.tar.gz
    #     chmod +x tf-summarize
    #     echo $PWD >> $GITHUB_PATH

    # - name: Terraform Init
    #   id: init
    #   shell: bash
    #   working-directory: ${{ inputs.working-directory }}
    #   run: terraform init ${{ inputs.terraform-init-flags }}
    #   continue-on-error: true

    # - name: Post Terraform init failure
    #   if: ${{ failure() && (github.event_name == 'pull_request') }}
    #   uses: actions/github-script@v7
    #   with:
    #     github-token: ${{ inputs.GITHUB_TOKEN }}
    #     script: |
    #       github.rest.issues.createComment({
    #         issue_number: context.issue.number,
    #         owner: context.repo.owner,
    #         repo: context.repo.repo,
    #         body: `# Terraform Init Failure
    #           ## ${{ inputs.header }}

    #           ## Details
    #           - **Workflow Header**: ${{ inputs.header }}
    #           - **Job ID**: ${{ github.job }}
    #           - **Step**: terraform init
    #           - **Status**: Failed
              

    #           ## Error output
    #           ${{ steps.init.outputs.stdout}}
    #           ${{ steps.init.outputs.stderr}}`
    #       })
    #       core.setFailed('The terraform init step failed.');
          
    # - name: Terraform Plan
    #   id: plan
    #   shell: bash
    #   working-directory: ${{ inputs.working-directory }}
    #   env:
    #     TF_WORKSPACE: ${{ inputs.terraform-workspace }}
    #     TF_IN_AUTOMATION: "true"
    #   run: |
    #     terraform plan -out=tfplan -input=false ${{ inputs.terraform-plan-flags }}
    #   continue-on-error: true

    # - name: Post PR comment
    #   uses: borchero/terraform-plan-comment@v2
    #   with:
    #     header: ${{ inputs.header }}
    #     token: ${{ inputs.GITHUB_TOKEN }}
    #     planfile: tfplan
    #     working-directory: ${{ inputs.working-directory }}

    - name: Post PR comment
      uses: op5dev/tf-via-pr@v13
      with:
        # Run plan by default, or apply on push to main.
        working-directory: ${{ inputs.working-directory }}
        command: plan
        arg-workspace: ${{ inputs.terraform-workspace }}
        token: ${{ inputs.GITHUB_TOKEN }}
        
    - name: Save Artifact
      id: save-artifact
      uses: actions/upload-artifact@v4
      with:
        name: pr-${{ github.event.pull_request.number }}-${{ inputs.workflow-artifact-name }}
        path: ${{ github.workspace }}/${{ inputs.working-directory }}/tfplan
      env:
        GITHUB_TOKEN: ${{ inputs.GITHUB_TOKEN }}

    - name: Debug with TMATE if the debug environment variable is set to "true" and something failed
      if: ${{ (failure() || steps.plan.outcome == 'failure') && inputs.debug == 'true' }}
      uses: mxschmitt/action-tmate@v3

    - name: Workflow Run Status
      shell: bash
      if: steps.plan.outcome == 'failure'
      run: exit 1
